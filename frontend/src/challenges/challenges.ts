import React from 'react';

const challenges = [
  // Main Challenges  
  {
    id: 'caesar-cipher',
    titleKey: 'Caesar Cipher Challenge',
    descriptionKey: 'Decode the Caesar cipher to reveal the hidden message.',
    categoryKey: 'cryptography',
    difficultyKey: 'easy',
    points: 30,
    component: React.lazy(() => import('./Challenge1Caesar')),
  },
  {
    id: 'order-matters',
    titleKey: 'Order Matters Challenge',
    descriptionKey: 'Click the buttons in the correct order to solve the challenge.',
    categoryKey: 'logic',
    difficultyKey: 'easy',
    points: 20,
    component: React.lazy(() => import('./Challenge2Order')),
  },
  {
    id: 'ui-bug',
    titleKey: 'UI Bug Challenge',
    descriptionKey: 'Find and exploit the UI bug to access hidden functionality.',
    categoryKey: 'ui',
    difficultyKey: 'medium',
    points: 35,
    component: React.lazy(() => import('./Challenge3UIBug')),
  },
  {
    id: 'url-param',
    titleKey: 'URL Parameter Challenge', 
    descriptionKey: 'Manipulate URL parameters to reveal hidden content.',
    categoryKey: 'web',
    difficultyKey: 'easy',
    points: 25,
    component: React.lazy(() => import('./Challenge4UrlParam')),
  },
  {
    id: 'cookie-challenge',
    titleKey: 'Cookie Inspector Challenge',
    descriptionKey: 'Inspect browser cookies to find the hidden flag.',
    categoryKey: 'web',
    difficultyKey: 'medium',
    points: 30,
    component: React.lazy(() => import('./Challenge5CookieSimple')),
  },
  {
    id: 'advanced-cookie-auth',
    titleKey: 'Advanced Cookie Authentication Bypass',
    descriptionKey: 'Bypass multi-layered enterprise-grade cookie authentication with JWT tokens, timestamp validation, and signature verification.',
    categoryKey: 'security',
    difficultyKey: 'hard',
    points: 75,
    component: React.lazy(() => import('./Challenge5Cookie')),
  },
  {
    id: 'json-challenge',
    titleKey: 'Sales Data Detective Challenge',
    descriptionKey: 'You\'re a data analyst investigating suspicious sales patterns. Analyze complex JSON dataset and answer 5 critical questions to prove your analytical skills.',
    categoryKey: 'data',
    difficultyKey: 'medium',
    points: 35,
    component: React.lazy(() => import('./Challenge6Json')),
  },
  {
    id: 'xhr-detective',
    titleKey: 'XHR Detective Challenge',
    descriptionKey: 'Intercept and analyze network requests to find the flag.',
    categoryKey: 'network',
    difficultyKey: 'medium',
    points: 40,
    component: React.lazy(() => import('./Challenge7XHRDetective')),
  },
  {
    id: 'css-debugger',
    titleKey: 'CSS Debugger Challenge',
    descriptionKey: 'Use CSS manipulation to reveal hidden elements.',
    categoryKey: 'ui',
    difficultyKey: 'medium', 
    points: 30,
    component: React.lazy(() => import('./Challenge8CSSDebugger')),
  },
  {
    id: 'cookie-hacker',
    titleKey: 'Cookie Hacker Challenge',
    descriptionKey: 'Advanced cookie manipulation to bypass security measures.',
    categoryKey: 'security',
    difficultyKey: 'medium',
    points: 35,
    component: React.lazy(() => import('./Challenge9CookieHacker')),
  },
  {
    id: 'localstorage-inspector',
    titleKey: 'LocalStorage Inspector Challenge',
    descriptionKey: 'Inspect and manipulate browser localStorage to find secrets.',
    categoryKey: 'web',
    difficultyKey: 'medium',
    points: 35,
    component: React.lazy(() => import('./Challenge10LocalStorageInspector')),
  },
  {
    id: 'broken-dom',
    titleKey: 'Broken DOM Challenge',
    descriptionKey: 'Fix the broken DOM structure to reveal the flag.',
    categoryKey: 'dom',
    difficultyKey: 'medium',
    points: 40,
    component: React.lazy(() => import('./Challenge11BrokenDOM')),
  },
  {
    id: 'json-validator',
    titleKey: 'JSON Validator Challenge',
    descriptionKey: 'Analyze complex JSON data to identify subtle validation errors and format violations.',
    categoryKey: 'data',
    difficultyKey: 'medium',
    points: 30,
    component: React.lazy(() => import('./Challenge12JSONValidator')),
  },
  {
    id: 'element-highlighter',
    titleKey: 'Element Highlighter Challenge',
    descriptionKey: 'Use element inspection to find highlighted secrets.',
    categoryKey: 'dom',
    difficultyKey: 'easy',
    points: 25,
    component: React.lazy(() => import('./Challenge13ElementHighlighter')),
  },
  {
    id: 'network-timing',
    titleKey: 'Network Timing Challenge',
    descriptionKey: 'Analyze network request timing to find the flag.',
    categoryKey: 'network',
    difficultyKey: 'medium',
    points: 35,
    component: React.lazy(() => import('./Challenge14NetworkTiming')),
  },
  {
    id: 'form-input-fuzzer',
    titleKey: 'Form Input Fuzzer Challenge',
    descriptionKey: 'Advanced penetration testing - find all 5 vulnerabilities using different fuzzing payloads across multiple endpoints.',
    categoryKey: 'security',
    difficultyKey: 'hard',
    points: 55,
    component: React.lazy(() => import('./Challenge15FormInputFuzzer')),
  },
  {
    id: 'race-condition-tester',
    titleKey: 'Banking Race Condition Challenge',
    descriptionKey: 'Interactive banking race condition challenge - exploit timing vulnerabilities to create money.',
    categoryKey: 'security',
    difficultyKey: 'medium',
    points: 35,
    component: React.lazy(() => import('./Challenge16RaceConditionTester')),
  },
  {
    id: 'dom-mutation-observer',
    titleKey: 'Dynamic Content Observer Challenge',
    descriptionKey: 'Use MutationObserver to detect hidden data attributes in a constantly changing web application.',
    categoryKey: 'dom',
    difficultyKey: 'hard',
    points: 50,
    component: React.lazy(() => import('./Challenge17DOMMutationObserver')),
  },
  {
    id: 'accessibility-audit',
    titleKey: 'Accessibility Audit Challenge',
    descriptionKey: 'Find accessibility issues and extract the flag.',
    categoryKey: 'accessibility',
    difficultyKey: 'easy',
    points: 25,
    component: React.lazy(() => import('./Challenge18AccessibilityAudit')),
  },
  {
    id: 'sql-orders-total',
    titleKey: 'SQL Orders Total Challenge',
    descriptionKey: 'Calculate the total amount of orders for a specific customer using SQL SUM function.',
    categoryKey: 'sql',
    difficultyKey: 'easy',
    points: 30,
    component: React.lazy(() => import('./Challenge19SQLOrdersTotal')),
  },
  {
    id: 'sql-login-frequency',
    titleKey: 'SQL Login Frequency Challenge',
    descriptionKey: 'Find the user with the most frequent logins in the last 30 days using SQL GROUP BY and COUNT.',
    categoryKey: 'sql',
    difficultyKey: 'medium',
    points: 40,
    component: React.lazy(() => import('./Challenge20SQLLoginFrequency')),
  },
  {
    id: 'encoded-token',
    titleKey: 'Encoded Token Challenge',
    descriptionKey: 'JWT token with exposed secret key in source code. Create a valid token with premium_user role to access the flag.',
    categoryKey: 'cryptography',
    difficultyKey: 'hard',
    points: 60,
    component: React.lazy(() => import('./Challenge21EncodedToken')),
  },
  {
    id: 'css-puzzle',
    titleKey: 'CSS Puzzle Challenge',
    descriptionKey: 'Flag hidden using advanced CSS techniques. Write CSS code to make the hidden flag visible.',
    categoryKey: 'css',
    difficultyKey: 'hard',
    points: 60,
    component: React.lazy(() => import('./Challenge22CSSPuzzle')),
  },
  {
    id: 'unauthorized-access-log',
    titleKey: 'Unauthorized Access Log Challenge',
    descriptionKey: 'Analyze server logs to find the IP address with the most failed login attempts (status code 401).',
    categoryKey: 'logs',
    difficultyKey: 'medium',
    points: 40,
    component: React.lazy(() => import('./Challenge23UnauthorizedAccessLog')),
  },
  {
    id: 'slowest-request',
    titleKey: 'Slowest Request Challenge',
    descriptionKey: 'Find the endpoint with the longest response time among successful requests (status 200).',
    categoryKey: 'logs',
    difficultyKey: 'medium',
    points: 40,
    component: React.lazy(() => import('./Challenge24SlowestRequest')),
  }
];

export default challenges; 